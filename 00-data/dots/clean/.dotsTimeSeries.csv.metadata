{"timestamp": 1647742345.832434, "stored_source_code": "upstream = ['dataCollect']\nproduct = None\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\nrawData=pd.read_csv(upstream['dataCollect']['DOTS'])\nkeepCols=['series_code', 'period', 'value', 'REF_AREA', 'INDICATOR', 'COUNTERPART_AREA', 'Reference Area', 'Counterpart Reference Area']\ncleanData = rawData[keepCols]\ncleanData.rename(columns={'Counterpart Reference Area':'CounterpartReferenceArea',\n        'Reference Area':'ReferenceArea'}, inplace=True)\nwideData = (cleanData\n    .pivot_table(\n        index=['period', 'CounterpartReferenceArea'],\n        columns='ReferenceArea',\n        values='value'))\n\n# remove groups\n# decided to keep 'Special Categories and Economic Zones' - sounds interesting\n# and wouldn't cause overlap to include i think\nremoveList = [\n'Export earnings: fuel',\n'Export earnings: nonfuel',\n'Middle East, North Africa, Afghanistan, and Pakistan',\n'Emerging and Developing Europe',\n'Western Hemisphere',\n'Western Hemisphere not allocated',\n'EU (Member States and Institutions of the European Union) changing composition',\n'Euro Area (Member States and Institutions of the Euro Area) changing composition',\n'Europe',\n'Europe not allocated',\n'Africa',\n'Africa not allocated',\n'Sub-Saharan Africa',\n'Middle East',\n'Middle East and Central Asia not specified',\n'Other Countries n.i.e. (IMF)',\n'Advanced Economies (IMF)',\n'Emerging and Developing Countries',\n'Developing Asia (IMF)',\n'Middle East and Central Asia',\n'Belgo-Luxembourg Economic Union',\n'Community of Independent States (CIS)',\n'Asia not allocated',\n'Former U.S.S.R.',\n'All Countries, excluding the IO']\n\ndataLong = (wideData\n    .melt(ignore_index=False)\n    .query('CounterpartReferenceArea not in @removeList')\n    .query('ReferenceArea not in @removeList')\n)\n\n\ndataLong.reset_index(inplace=True)\ndataLong['period'] = pd.to_datetime(dataLong['period'])\n\nwideData2 = dataLong.pivot_table(index=['period', 'CounterpartReferenceArea'],\n                                columns='ReferenceArea',\n                                values='value')\n\n\n\n# nanData=dataLong['value'].isna().groupby([dataLong['period'], dataLong['ReferenceArea']]).sum()\n\n# nanData=pd.DataFrame(nanData).reset_index()\n\n# nanData=nanData.pivot_table(index='period', columns='ReferenceArea', values='value')\n\n# #nanData=nanData[nanData.index > \"1990-01-01\"]\n\n# nanData=nanData / dataLong['CounterpartReferenceArea'].nunique()\n\n\n# inputData=nanData\n# ncols=2\n# width=10\n# length=100\n\n# from math import ceil\n\n# nrows = ceil(len(inputData.columns) / ncols)\n\n# fig, axes = plt.subplots(nrows=nrows, ncols=ncols, dpi=120, figsize=(width,length))\n# for i, ax in enumerate(axes.flatten()):\n#     if i > len(inputData.columns):\n#         pass\n#     else:\n#         data = inputData[inputData.columns[i]]\n#         ax.plot(data, color='red', linewidth=1)\n#         # Decorations\n#         ax.set_title(inputData.columns[i])\n#         ax.xaxis.set_ticks_position('none')\n#         ax.get_xaxis().set_visible(False)\n#         ax.yaxis.set_ticks_position('none')\n#         ax.spines[\"top\"].set_alpha(0)\n#         ax.tick_params(labelsize=6)\n\n# plt.tight_layout()\n\n\nnanData=dataLong['value'].isna().groupby([dataLong['period'], dataLong['ReferenceArea']]).sum()\n\nnanData=pd.DataFrame(nanData).reset_index()\n\nnanData=nanData.pivot_table(index='period', columns='ReferenceArea', values='value')\n\ntotalNans=nanData.values.sum()\n\ntotalCombo=dataLong['CounterpartReferenceArea'].nunique() * dataLong['ReferenceArea'].nunique()\n\nresults={}\nfor col in nanData:\n\n    temp=dataLong[dataLong['ReferenceArea']!=col]\n    tempNanData=temp['value'].isna().groupby([dataLong['period'], dataLong['ReferenceArea']]).sum()\n\n    results[col] = totalNans-tempNanData.values.sum()\n    print(col, ' : ',totalNans-tempNanData.values.sum())\n\ntenLargestMissing=pd.DataFrame(sorted(results.items(), key=lambda item: item[1])).tail(10)\n\nremoveEcons=[econ for econ in tenLargestMissing[0]]\n\n# nanData=dataLong['value'].isna().groupby([dataLong['period'], dataLong['ReferenceArea']]).sum()\n\n# nanData=pd.DataFrame(nanData).reset_index()\n\n# nanData=nanData.pivot_table(index='period', columns='ReferenceArea', values='value')\n\n# nanData=nanData / dataLong['CounterpartReferenceArea'].nunique()\n\n# for col in nanData:\n#     # https://stackoverflow.com/a/49573439/11706269\n#     plt.plot(nanData[[col]])\n#     ax=plt.gca()\n#     ax.xaxis.set_major_locator(mdates.YearLocator(10))\n#     ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n\n# ax.set_title('percent of data missing')\n\nlargestMissing=pd.DataFrame(sorted(results.items(), key=lambda item: item[1])).tail(100)\nremoveEcons=[econ for econ in largestMissing[0]]\n\ntempLong=dataLong[~dataLong['CounterpartReferenceArea'].isin(removeEcons)]\ntempLong=tempLong[~tempLong['ReferenceArea'].isin(removeEcons)]\n\ndates=tempLong['period'].unique()\ndroppedShapes=[]\nfor date in dates:\n\n    temp=tempLong[tempLong['period'] > date]\n    temp=temp.pivot_table(index='period', columns=['ReferenceArea', 'CounterpartReferenceArea'], values='value')\n    temp=temp.dropna(axis=1)\n    print(temp.shape)\n    droppedShapes.append(pd.DataFrame({'date':date, 'length': temp.shape[0], 'series':temp.shape[1]}, index=[date]))\n\ndropDf=pd.concat(droppedShapes)\ndropDf.plot.scatter(x='length', y='series')\n\ntemp=tempLong[tempLong['period'] > '1980-01-01']\ntemp=temp.pivot_table(index='period', columns=['ReferenceArea', 'CounterpartReferenceArea'], values='value')\ntemp.dropna(axis=1, inplace=True)\n\n# for col in temp:\n#     # https://stackoverflow.com/a/49573439/11706269\n#     plt.plot(temp.index, temp[[col]])\n#     ax=plt.gca()\n#     ax.xaxis.set_major_locator(mdates.YearLocator(10))\n#     ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n\ntemp=temp.melt(ignore_index=False)\ntemp.to_csv(product['dotsTimeSeries'])", "params": {}}