{"timestamp": 1647664377.569582, "stored_source_code": "upstream = ['downLoadMetaData'] # this means: execute raw.py, then clean.py\nproduct = None\n\nimport pandas as pd\nfrom dbnomics import fetch_series\nimport os\n\n# r seems to have saved this in some odd way\ncountries=pd.read_csv(upstream['downLoadMetaData']['countries'])\ncounterparts=pd.read_csv(upstream['downLoadMetaData']['counterparts'])\n# TODO: parameterize import/export with ploomber\n# goods, value of imports CIF price - TMG_CIF_USD\n# goods, value of exports FOD - TXG_FOB_USD\n\n\nfor econ in countries['REF_AREA']:\n    try:\n        data = fetch_series(\n                provider_code='IMF',\n                dataset_code='DOT',\n                max_nb_series=1000000,\n                dimensions={\n                \"FREQ\":[\"M\"],\n                \"REF_AREA\":[f\"{econ}\"],\n                \"INDICATOR\":[\"TXG_FOB_USD\"]}\n            )\n        data.to_csv(rf'{str(product[\"files\"])}\\{econ}.csv')\n    except:\n        # TODO: Log this economy that didn't work\n        pass\n\npath = product['files']\ndirectory = os.fsencode(path)\n\ndfList = []\n\nfor file in os.listdir(directory):\n     filename = os.fsdecode(file)\n     if filename.endswith(\".csv\"):\n         dfList.append(pd.read_csv(os.path.join(path, filename)))\n     else:\n         continue\n\ndata = pd.concat(dfList)\n\ndata.to_csv(product['DOTS'])", "params": {}}